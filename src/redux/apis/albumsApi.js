// Importing necessary functions from Redux Toolkit Query and Faker library
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { faker } from "@faker-js/faker";

// Creating an API slice using Redux Toolkit Query
const albumsApi = createApi({
    // 'reducerPath' is the name of the reducer that will be added to the Redux store
    // this creates a 'state.albums' object in the Redux store
    reducerPath: "albums",

    // 'baseQuery' is a function that returns the base part of all requests
    // Here, it sets the base URL for all API calls to "http://localhost:3005"
    baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:3005" }),

    // 'endpoints' is an object that defines the API endpoints
    endpoints(builder) {
        return {
            // 'fetchAlbums' is a query endpoint that fetches albums
            fetchAlbums: builder.query({
                // 'providesTags' is an array of tags that this endpoint provides
                // These tags can be used to invalidate or refetch data
                providesTags: (result, error, user) => {
                    const tags = result.map((album) => ({
                        type: "Albums",
                        id: album.id,
                    }));
                    tags.push({ type: "usersAlbums", id: user.id });
                    return tags;
                },

                // 'query' is a function that returns the details of the API call
                query: (user) => {
                    return {
                        // The URL of the API call
                        url: `/albums`,

                        // The parameters of the API call
                        params: {
                            userId: user.id,
                        },

                        // The HTTP method of the API call
                        method: "GET",
                    };
                },
            }),

            // 'addAlbum' is a mutation endpoint that adds a new album
            addAlbum: builder.mutation({
                // 'invalidatesTags' is an array of tags that this endpoint invalidates
                // When this mutation is called, any data associated with these tags will be refetched
                invalidatesTags: (result, error, user) => {
                    return [{ type: "usersAlbums", id: user.id }];
                },

                // 'query' is a function that returns the details of the API call
                query: (user) => {
                    return {
                        // The URL of the API call
                        url: `/albums`,

                        // The HTTP method of the API call
                        method: "POST",

                        // The body of the API call
                        body: {
                            userId: user.id,

                            // The title of the album is generated using the Faker library
                            title: faker.commerce.productName(),
                        },
                    };
                },
            }),
            deleteAlbum: builder.mutation({
                invalidatesTags: (result, error, album) => [
                    { type: "Albums", id: album.id },
                ],
                query: (album) => {
                    return {
                        url: `/albums/${album.id}`,
                        method: "DELETE",
                    };
                },
            }),
        };
    },
});

// Exporting the hooks generated by Redux Toolkit Query
export const {
    useFetchAlbumsQuery,
    useAddAlbumMutation,
    useDeleteAlbumMutation,
} = albumsApi;

// Exporting the API slice
export { albumsApi };
